#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   http://haproxy.1wt.eu/download/1.4/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    tune.ssl.default-dh-param 2048

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor      
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 2048
    stats enable

# mastats enable
    stats uri /stats
    stats realm Haproxy\ Statistics
    stats auth gil:gil

#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
frontend  main *:5000
    acl url_static       path_beg       -i /static /images /javascript /stylesheets
    acl url_static       path_end       -i .jpg .gif .png .css .js

    use_backend static          if url_static
    default_backend             app

#---------------------------------------------------------------------
# static backend for serving up images, stylesheets and such
#---------------------------------------------------------------------
backend static
    balance     roundrobin
    server      static 127.0.0.1:4331 check

#---------------------------------------------------------------------
# round robin balancing between the various backends
#---------------------------------------------------------------------
backend app
    balance     roundrobin
    server  app1 127.0.0.1:5001 check
    server  app2 127.0.0.1:5002 check
    server  app3 127.0.0.1:5003 check
    server  app4 127.0.0.1:5004 check

frontend www-http
   bind *:80
   reqadd X-Forwarded-Proto:\ http
#   default_backend www-backend

#   acl host_01 hdr(host) -i example.com
   
#   use_backend www-backend if host_01

frontend www-https
#	when using AWS bind the private UP of the HAproxy instance

   bind [exmaple.com domain-ip]:443 ssl crt /etc/ssl/pems/  # all of the domain SSL certificates should be placed in the same folder, when using multiple domain with the same IP

   reqadd X-Forwarded-Proto:\ https

   acl host_example hdr(host) -i example.com
   acl host_name1.example hdr(host) -i name1.example.com
   acl host_name2.example hdr(host) -i name2.example.com

   use_backend www.example.com if host_example
   use_backend www.name1.example.com if host_name1.example
   use_backend www.name2.example.com if host_name2.example

#  default_backend www-backend
backend www.example.com
	redirect scheme https if !{ ssl_fc }
	server www-1 172.31.19.174:80 check
	server www-2 172.31.19.175:80 check

backend www.name1.example.com
	redirect scheme https if !{ ssl_fc }
	server www-1 172.31.19.176:80 check 
	server www-1 172.31.19.177:80 check 

backend www.name2.example.com
	redirect scheme https if !{ ssl_fc }
	server www-1 172.31.19.178:80 check
	server www-1 172.31.19.179:80 check

	